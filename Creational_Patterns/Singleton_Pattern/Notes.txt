1- En Python, chaque module est chargé et créé une seule fois lors de son premier import dans une application, conformément au principe du Singleton. Ce comportement garantit l'unicité de l'instance d'un module à travers toute l'application, assurant ainsi un accès global et uniforme aux fonctions, classes, et variables qu'il définit. Grâce à ce mécanisme, Python évite les chargements multiples et redondants d'un même module, favorisant une gestion de mémoire efficace et la cohérence des données. Lorsqu'un module est requis dans différentes parties du programme, l'importation subséquente utilise la référence déjà chargée disponible dans sys.modules, ce qui illustre le pattern Singleton dans la gestion des modules Python. Ce système simplifie la modularisation du code, en permettant aux développeurs de créer des espaces de noms distincts et de réutiliser le code de manière efficace et organisée.

2- Un tuple de taille égale à 1 est appelé un Singleton. Cette caractéristique des tuples en Python illustre le principe de Singleton au niveau des structures de données, où l'unicité d'un élément est conservée, soulignant l'importance de maintenir un état unique dans certaines conditions.

3- None est un Singleton. Cela signifie que None est une instance unique qui représente l'absence de valeur ou la nullité dans Python. L'utilisation de None comme Singleton est cruciale pour la gestion des valeurs nulles dans le langage, en assurant que toutes les références à None pointent vers la même instance, facilitant ainsi la comparaison et la gestion des valeurs nulles.

Concernant la différence entre __new__ et __init__ dans le contexte des classes Python, qui peut être reliée au concept de Singleton dans la mesure où __new__ peut être utilisé pour contrôler la création d'instances, ce qui est au cœur du pattern Singleton :

__new__ est appelé avant __init__. Il est utilisé pour contrôler la création d'une nouvelle instance de la classe. Dans le cadre du Singleton, __new__ peut être surchargé pour vérifier si une instance existe déjà et, dans ce cas, la retourner au lieu d'en créer une nouvelle, assurant ainsi qu'une seule instance de la classe est créée.

__init__ est appelé après __new__ et est utilisé pour initialiser l'instance nouvellement créée avec les valeurs fournies. Dans un Singleton, bien que __init__ puisse être appelé plusieurs fois, l'unicité de l'instance reste garantie par l'implémentation de __new__.